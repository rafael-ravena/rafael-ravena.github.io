using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Office.Interop.Outlook;
using OutlookApp = Microsoft.Office.Interop.Outlook.Application;
using System.Globalization;
using System.IO;
using System.Windows;

namespace MyNamespace
{
	public class Mail
	{
		private OutlookApp application;
		private OutlookApp Application
		{
			get
			{
				if (application == null)
					application = new OutlookApp();
				return application;
			}
		}
		private MailItem email;
		private MailItem Email
		{
			get
			{
				if (email == null)
					email = Application.CreateItem(OlItemType.olMailItem);
				return email;
			}
		}
		public static void SendEmail(string subject, string body, string to, bool sendAuto)
		{
			SendEmail(subject, body, to, new List<string>(), sendAuto);
		}
		public static void SendEmail(string subject, string body, string to, List<string> attachments, bool sendAuto)
		{
			try
			{
				Mail me = new Mail();
				me.Email.Subject = subject;
				me.Email.HTMLBody = body;
				for (int i = 0; i < attachments.Count; i++)
					me.Email.Attachments.Add(attachments[i], OlAttachmentType.olByValue, me.Email.Body.Length + 1, attachments[i].Substring(0, attachments[i].LastIndexOf('.')));
				me.Email.To = to;
				me.Email.Display(false);
				if (sendAuto)
					((_MailItem)me.Email).Send();
				me.Kill();
			}
			catch (System.Runtime.InteropServices.ExternalException)
			{
				MessageBox.Show("Você precisa autorizar o acesso ao Outlook no prompt para que os e-mails sejam enviados ou contenham anexos.\n" + 
				"Marque a caixa \"Permitir acesso por\", selecione a opção \"2 minutos\" ou mais e clique em \"Autorizar\".");
			}
		}
		private void Kill()
		{
			email = null;
			application = null;
		}
		public static string GetDefaultSignature()
		{
			string signaturesDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Signatures";
			string signature = string.Empty;
			DirectoryInfo di = new DirectoryInfo(signaturesDirectory);
			if (di.Exists)
			{
				FileInfo[] signatureFiles = di.GetFiles("*.htm");
				if (signatureFiles.Length > 0)
				{
					StreamReader sr = new StreamReader(signatureFiles[0].FullName, Encoding.Default);
					signature = sr.ReadToEnd();
					if (!string.IsNullOrEmpty(signature))
					{
						string fileName = signatureFiles[0].Name.Replace(signatureFiles[0].Extension, string.Empty);
						signature = signature.Replace(fileName + "_files/", signaturesDirectory + "/" + fileName + "_files/");
					}
				}

			}
			return signature;
		}
	}
}
